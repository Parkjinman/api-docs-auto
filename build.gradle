plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.15'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'

	id "org.asciidoctor.jvm.convert" version "3.3.2"
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
    id "com.epages.restdocs-api-spec" version "0.16.2"
}

group = 'intergration.auto'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '1.8'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt
}

repositories {
	mavenCentral()
}

ext {
    set("snippetsDir", file("build/generated-snippets"))
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation group: 'com.github.gavlyukovskiy', name: 'p6spy-spring-boot-starter', version: '1.8.0'
	implementation("p6spy:p6spy:3.9.1")

	implementation("org.springdoc:springdoc-openapi-ui:1.6.11")
    implementation("org.springdoc:springdoc-openapi-webmvc-core:1.6.11")

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation("org.springframework.restdocs:spring-restdocs-mockmvc")
    testImplementation("com.epages:restdocs-api-spec:0.16.2")
    testImplementation("com.epages:restdocs-api-spec-mockmvc:0.16.2")

    asciidoctorExt("org.springframework.restdocs:spring-restdocs-asciidoctor")
}

tasks.named("test") {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.register("restDocsTest", Test) {
    outputs.dir snippetsDir
    useJUnitPlatform {
        includeTags("restDocs")
    }

    finalizedBy "asciidoctor"
    finalizedBy "openapi3"
}

tasks.named("asciidoctor") {
    dependsOn restDocsTest

    inputs.dir snippetsDir
    configurations "asciidoctorExt"
    baseDirFollowsSourceDir()
}

openapi3 {
    servers = [
            { url = 'http://localhost:9080' },
    ]
    title = 'spring-rest-docs-guide'
    description = 'Spring REST Docs 테스트 생성물 생성시 추가생성되는 OpenAPI 문서이용'
    version = "${project.version}"
    format = 'yaml'
}

// Swagger 문서 경로 수정
//tasks.register("modifySwaggerPaths") {
//    dependsOn("openapi3") // openapi3 태스크 실행 후 수정 수행
//
//    doLast {
//        def openApiDir = file("${buildDir}/api-spec")
//        def openApiFile = new File(openApiDir, "openapi3.yaml") // OpenAPI 문서 파일
//
//        if (!openApiFile.exists()) {
//            throw new GradleException("OpenAPI 파일이 존재하지 않습니다: ${openApiFile.absolutePath}")
//        }
//
//        // SnakeYAML 사용
//        def yamlParser = new org.yaml.snakeyaml.Yaml()
//        def yamlData = yamlParser.load(openApiFile.text)
//
//        def updatedPaths = [:]
//        yamlData.paths.each { path, pathItem ->
//            def newPath = path.replaceFirst("^/[^/]+/[^/]+", "") // '/depth1/depth2' prefix 제거
////            def newPath = path.replaceFirst("^/api/v1", "") // '/api/v1' prefix 제거
//
//            def matcher = newPath =~ /^\/([^\/]+)/
//
//            // 각 HTTP 메서드 수준의 태그 정리
//            pathItem.each { method, operation ->
//                def threeName = matcher[0][1] // 첫 번째 경로를 추출
//                operation.tags = [threeName.capitalize()]
//            }
//
//            updatedPaths[newPath] = pathItem
//        }
//
//        yamlData.paths = updatedPaths
//        // 수정된 파일 저장
//        openApiFile.text = yamlParser.dump(yamlData)
//    }
//}

tasks.register("apiBuild", GradleBuild) {
    tasks = ["clean", "restDocsTest", "build"]
}

springBoot {
    buildInfo()
}

gitProperties {
    dateFormat = "yyyy-MM-dd'T'HH:mm:ss.Zz"
    dateFormatTimeZone = "Asia/Seoul"
    failOnNoGitDirectory = false
}

bootJar {
    from("swagger-ui") {
        into "BOOT-INF/classes/static/swagger"
    }
    from("${asciidoctor.outputDir}") {
        into "BOOT-INF/classes/static/docs"
    }
    from("build/api-spec") {
        into "BOOT-INF/classes/static/swagger"
    }

    archiveFileName.set "application.jar"
}

// application.jar 이외 jar파일 생성 방지
//jar {
//    enabled = false
//}

// test task 비활성화
// tasks.named('test') {
//     enabled = false
// }
